<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:*.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="accountService" class="com.cw.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
        <!--<property name="dataSource" ref="dataSource"/>-->
    </bean>

    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.cw.domain"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cw.dao"/>
    </bean>

    <!--###################### AOP格式 ######################-->
    <!--###################### AOP格式 ######################-->
    <!--###################### AOP格式 ######################-->

    <!--<bean id="txAdvice" class="com.cw.aop.TxAdvice">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <aop:config>
        <aop:pointcut id="pt" expression="execution(* *..transfer(..))"/>
        <aop:aspect ref="txAdvice">
            <aop:around method="transactionManager" pointcut-ref="pt"/>
        </aop:aspect>
    </aop:config>-->

    <!--###################### TX格式 ######################-->
    <!--###################### TX格式 ######################-->
    <!--###################### TX格式 ######################-->

    <!--事务管理器bean-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--定义事务管理的通知类-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!--定义控制的事务-->
        <tx:attributes>
            <!--通常事务属性会配置多个，包含1个读写的全事务属性，1个只读的查询类事务属性-->
            <tx:method name="*" read-only="false"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <!--
                name:待添加事务的方法名表达式(支持*号通配符)，例如get*、*
                read-only:设置事务的读写属性，true为只读，false为读写
                timeout:设置事务超时时长，单位秒
                isolation:设置事务隔离级别，该隔离级设定是基于Spring的设定，非数据库端
                no-rollback-for:设置事务中不回滚的异常，多个异常间使用,分割
                no-rollback-for="java.lang.ArithmeticException" 表示事务遇到ArithmeticException异常是不会进行回滚的
                rollback-for:设置事务中必回滚的异常，多个异常间使用,分割
                propagation:设置事务的传播行为
            -->
            <tx:method
                    name="transfer"
                    read-only="false"
                    timeout="-1"
                    isolation="DEFAULT"
                    no-rollback-for=""
                    rollback-for=""
                    propagation="REQUIRED"
            />
            <!--<tx:method name="transfer" read-only="false"/>-->
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="pt" expression="execution(* com.cw.service.*Service.*(..))"/>
        <!--
            aop:advice配置的通知类可以是普通java对象，不实现接口，也不使用继承关系
            aop:advisor配置的通知类必须实现通知接口
            - MethodBeforeAdvice
            - AfterReturningAdvice
            - ThrowsAdvice
            - ……
        -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
    </aop:config>
</beans>