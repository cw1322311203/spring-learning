<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
        IoC（Inversion Of Control）控制翻转，Spring反向控制应用程序所需要使用的外部资源
        DI（Dependency Injection）依赖注入，应用程序运行依赖的资源由Spring为其提供，资源进入应用程序的方式称为注入
    -->
    <!--1.创建spring控制的资源-->
    <!--bean可以定义多个名称，使用name属性完成，中间使用逗号分隔-->
    <!--<bean id="userService" name="userService1,userService2" class="com.cw.service.impl.UserServiceImpl"/>-->

    <!--
        scope:定义bean的作用范围，用于控制bean创建后的对象是否是单例的，默认为singleton
        - singleton：设定创建出的对象保存在spring容器中，是一个单例的对象
        - prototype：设定创建出的对象保存在spring容器中，是一个非单例的对象
    -->
    <!--<bean id="userService3" scope="prototype" class="com.cw.service.impl.UserServiceImpl"/>-->

    <!--
        init-method与destroy-method用于控制bean的生命周期
        定义bean对象在初始化或销毁时完成的工作
        取值：bean对应的类中对应的具体方法名
        - 当scope=“singleton”时，spring容器中有且仅有一个对象，init方法在创建容器时仅执行一次
        - 当scope=“prototype”时，spring容器要创建同一类型的多个对象，init方法在每个对象创建时均执行一次
        - 当scope=“singleton”时，关闭容器会导致bean实例的销毁，调用destroy方法一次
        - 当scope=“prototype”时，对象的销毁由垃圾回收机制gc()控制，destroy方法将不会被执行
    -->
    <!--<bean id="userService3" scope="singleton" init-method="init" destroy-method="destroy" class="com.cw.service.impl.UserServiceImpl"/>-->

    <!--bean对象创建方式-->
    <!--
        静态工厂创建bean
        定义bean对象创建方式，使用静态工厂的形式创建bean，兼容早期遗留系统的升级工作
    -->
    <bean id="userService4" class="com.cw.service.UserServiceFactory" factory-method="getService"/>
    <!--实例工厂对应的bean-->
    <bean id="factoryBean" class="com.cw.service.UserServiceFactory2"/>
    <!--
        实例工厂创建bean,依赖工厂对象对应的bean
        定义bean对象创建方式，使用实例工厂的形式创建bean，兼容早期遗留系统的升级工作
    -->
    <bean id="userService5" factory-bean="factoryBean" factory-method="getService"/>


</beans>